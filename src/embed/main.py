{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":31040,"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# /// script\n# dependencies = [\n#   \"GitPython\",\n#    \"embed\",\n#    \"torch\",\n#    \"transformers<4.49\",\n#    \"peft\",\n#    \"pymilvus\",\n#    \"numpy\",\n# ]\n# ///\n\n# Imports\nfrom embed import BatchedInference\nfrom concurrent.futures import Future\nimport os\nimport time\nfrom pathlib import Path\n\n# Huggingface authentication\nfrom huggingface_hub import login\nlogin(token=os.getenv(\"HF_TOKEN\"))\n\n# Define custom embedding function\nregister = BatchedInference(\n    model_id=[\n        \"jinaai/jina-embeddings-v2-base-code\",\n        \"Salesforce/codet5p-110m-embedding\",\n        \"codesage/codesage-large-v2\"\n    ],\n    engine=\"torch\",\n    device=\"cuda\",\n)\n\n# Milvus setup\nfrom pymilvus import MilvusClient\nmilvus_client = MilvusClient(uri=\"./embeddings.db\")\n\n# Define collection names and drop if present\ncollections = [\"PriA\", \"PriB\", \"PriC\", \"FrkA\", \"FrkB\", \"FrkC\"]\nfor idx in collections:\n    if milvus_client.has_collection(idx):\n        milvus_client.drop_collection(idx)\n\n# Create new collections\nfor idx in collections:\n    milvus_client.create_collection(\n        collection_name=idx,\n        metric_type=\"COSINE\",\n        consistency_level=\"Strong\",\n    )\n\ndef load(dir_path, db, model):\n    \"\"\"\n    Load repository files, embed their contents, and store in Milvus\n    \"\"\"\n    # Define code file extensions to process\n    code_extensions = {'.py', '.js', '.java', '.cpp', '.c', '.h', '.cs', '.php', '.rb', '.go', '.rs', '.swift', '.kt'}\n    \n    dir_path = Path(dir_path)\n    files_processed = 0\n    \n    # Walk through directory\n    for file_path in dir_path.rglob('*'):\n        if file_path.is_file() and file_path.suffix.lower() in code_extensions:\n            try:\n                # Read file content\n                with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:\n                    content = f.read()\n                \n                # Skip empty files\n                if not content.strip():\n                    continue\n                \n                print(f\"Processing: {file_path}\")\n                \n                # Embed the file content\n                future = register.embed(sentences=[content], model_id=model)\n                embeddings = future.result()\n                \n                # Prepare data for insertion\n                data_to_insert = []\n                for i, embedding in enumerate(embeddings):\n                    data_to_insert.append({\n                        \"id\": files_processed + i,\n                        \"vector\": embedding,\n                        \"file_path\": str(file_path.relative_to(dir_path)),\n                        \"file_name\": file_path.name,\n                        \"content\": content  # Store file contents as metadata\n                    })\n                \n                # Insert into Milvus\n                milvus_client.insert(collection_name=db, data=data_to_insert)\n                files_processed += len(embeddings)\n                \n                # Small delay to prevent overwhelming the system\n                time.sleep(0.1)\n                \n            except Exception as e:\n                print(f\"Error processing {file_path}: {e}\")\n                continue\n    \n    print(f\"Processed {files_processed} files for {db}\")\n\n# Pull down repositories\nfrom git import Repo\n\ntry:\n    # Create data directory\n    os.makedirs(\"./data\", exist_ok=True)\n    \n    # Clone repositories (fixed syntax)\n    print(\"Cloning primary repository...\")\n    if os.path.exists(\"./data/primary\"):\n        import shutil\n        shutil.rmtree(\"./data/primary\")\n    primary = Repo.clone_from(\"https://github.com/cowsay-org/cowsay\", \"./data/primary\")\n    \n    print(\"Cloning fork repository...\")\n    if os.path.exists(\"./data/fork\"):\n        import shutil\n        shutil.rmtree(\"./data/fork\")\n    fork = Repo.clone_from(\"https://github.com/cowsay-org/homebrew-cowsay\", \"./data/fork\")\n    \n    # Process repositories with different models\n    print(\"Starting embedding process...\")\n    \n    # Process primary repo with different models\n    load(\"./data/primary\", \"PriA\", \"jinaai/jina-embeddings-v2-base-code\")\n    load(\"./data/primary\", \"PriB\", \"Salesforce/codet5p-110m-embedding\")\n    load(\"./data/primary\", \"PriC\", \"codesage/codesage-large-v2\")\n    \n    # Process fork repo with different models\n    load(\"./data/fork\", \"FrkA\", \"jinaai/jina-embeddings-v2-base-code\")\n    load(\"./data/fork\", \"FrkB\", \"Salesforce/codet5p-110m-embedding\")\n    load(\"./data/fork\", \"FrkC\", \"codesage/codesage-large-v2\")\n    \n    print(\"All embedding operations completed successfully!\")\n    \nexcept Exception as e:\n    print(f\"Error during execution: {e}\")\n    \nfinally:\n    # Properly shutdown the embedding service\n    print(\"Shutting down embedding service...\")\n    register.stop()\n    print(\"Script completed.\")","metadata":{"_uuid":"b605131d-6ba1-408c-ba95-0d0d3aaead5c","_cell_guid":"5e594028-de65-47e1-8543-1f97465e139c","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null}]}