/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author rahdirigs
 */

#include <bits/stdc++.h>

using namespace std;

const int mxN = 310;
double dp[mxN][mxN][mxN];
bool vis[mxN][mxN][mxN];
int N;

class TaskJ {
public:
	void solve(std::istream& in, std::ostream& out) {
		in >> N;
		int a[4] = {0};
		for (int i = 0; i < N; i++) {
			int x; in >> x;
			a[x]++;
		}
		memset(vis, false, sizeof(vis));
		double ans = rec(a[1], a[2], a[3]);
		out << fixed << setprecision(12) << ans;
	}

	double rec(int x, int y, int z) {
		double &ret = dp[x][y][z];
		if (x < 0 || y < 0 || z < 0) return 0;
		if (x == 0 && y == 0 && z == 0) return 0;
		if (vis[x][y][z]) return ret;
		vis[x][y][z] = true;
		int rem = x + y + z;
		double val = N + x * rec(x - 1, y, z) + y * rec(x + 1, y - 1, z) + z * rec(x, y + 1, z - 1);
		return ret = val / rem;
	}
};


int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	TaskJ solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
