/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author rahdirigs
 */

#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

template <typename T> void add(T& a, T b, int mod) {
	a += b;
	if (a >= mod)
		a -= mod;
}

template <typename T> void sub(T& a, T b, int mod) {
	a -= b;
	if (a < 0)
		a += mod;
}

const int mxN = 10005, mxD = 110, mod = 1e9 + 7;
ll dp[mxN][mxD][2];

class TaskS {
public:
	string K;
	int D, n;
	vector<int> digits;

	void solve(std::istream& in, std::ostream& out) {
		in >> K >> D;
		for (char it : K) digits.push_back(it - '0');
		n = (int) digits.size();
		memset(dp, -1, sizeof(dp));
		ll ans = rec(0, 0, 1);
		sub(ans, 1ll, mod);
		out << ans;
	}

	ll rec(int pos, int sum, int flag) {
		if (pos == n) {
			if (sum % D == 0) return 1;
			return 0;
		}
		if (dp[pos][sum][flag] != -1) return dp[pos][sum][flag];
		int limit = 9;
		ll tot = 0;
		if (flag == 1) limit = digits[pos];
		for (int i = 0; i <= limit; i++) {
			if (i == digits[pos]) {
				add(tot, rec(pos + 1, (sum + i) % D, flag), mod);
			} else {
				add(tot, rec(pos + 1, (sum + i) % D, 0), mod);
			}
		}
		return dp[pos][sum][flag] = tot;
	}
};

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	TaskS solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
