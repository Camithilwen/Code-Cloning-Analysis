name: embed_check

on:
  push:
    branches: [ embed ]

jobs:
  kaggle-embedding:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Kaggle Script with UV Environment
        uses: KevKibe/kaggle-script-action@v1.0.5
        with:
          # Kaggle credentials
          username: ${{ secrets.KAGGLE_USERNAME }}
          key: ${{ secrets.KAGGLE_KEY }}

          # Kernel configuration
          title: "Code Embedding Pipeline"
          slug: "code-embedding-pipeline"
          type: "script"
          is_private: true
          enable_gpu: true
          enable_internet: true

          # Script to execute
          script: |
            # Set environment variables
            export HF_TOKEN="${{ secrets.HF_TOKEN }}"

            # Clone repository to get the latest code
            git clone -b embed https://github.com/${{ github.repository }} code-cloning-analysis
            cd code-cloning-analysis/src/

            # Install UV package manager
            curl -LsSf https://astral.sh/uv/install.sh | sh
            export PATH="$HOME/.cargo/bin:$PATH"

            # Create .env file for HF token
            echo "HF_TOKEN=$HF_TOKEN" > .env

            # Create embed/data directory to ensure proper path structure
            mkdir -p embed/data

            # Run the main embedding script
            echo "Starting embedding process..."
            uv run --env-file .env embed/main.py

            # Run the database check script
            echo "Running database verification..."
            uv run db_check/check.py

            # Verify database was created
            if [ -f "embed/data/embeddings.db" ]; then
                echo "✅ Database file created successfully!"
                echo "Database size: $(stat -f%z embed/data/embeddings.db 2>/dev/null || stat -c%s embed/data/embeddings.db) bytes"
                ls -la embed/data/
            else
                echo "❌ Database file not found at embed/data/embeddings.db"
                echo "Contents of embed/data/:"
                ls -la embed/data/ || echo "embed/data/ directory not found"
                echo "Searching for .db files:"
                find . -name "*.db" -type f
                exit 1
            fi

      - name: Download Kaggle Kernel Output
        uses: actions/download-artifact@v4
        with:
          name: kaggle-output
          path: ./kaggle_output

      - name: Extract Database File
        run: |
          echo "Searching for embeddings.db in kaggle output..."

          # Search for the database file in the output
          DB_FILE=$(find ./kaggle_output -name "embeddings.db" -type f | head -1)

          if [ -n "$DB_FILE" ]; then
            echo "✅ Found database file: $DB_FILE"

            # Create a staging directory for the artifact
            mkdir -p ./database_artifact

            # Copy the database file to staging directory
            cp "$DB_FILE" ./database_artifact/embeddings.db

            echo "Database file prepared for upload:"
            ls -la ./database_artifact/
            echo "File size: $(stat -f%z ./database_artifact/embeddings.db 2>/dev/null || stat -c%s ./database_artifact/embeddings.db) bytes"
          else
            echo "❌ Database file not found in Kaggle output"
            echo "Available files in kaggle_output:"
            find ./kaggle_output -type f | head -20
            exit 1
          fi

      - name: Upload Database Artifact
        uses: actions/upload-artifact@v4
        with:
          name: embeddings-database
          path: ./database_artifact/embeddings.db
          retention-days: 30
          compression-level: 6

      - name: Verify Upload Success
        run: |
          if [ -f "./database_artifact/embeddings.db" ]; then
            echo "✅ Database artifact ready for upload"
            echo "Final file size: $(stat -f%z ./database_artifact/embeddings.db 2>/dev/null || stat -c%s ./database_artifact/embeddings.db) bytes"
          else
            echo "❌ Database artifact not found for upload"
            exit 1
          fi
